---
- name: Create cache directory
  become: true
  file:
    path: "{{ docker_ecr_proxy_cache_path  }}"
    state: directory
    mode: "u=rwx,go=rx"
    recurse: true

- name: Copy the ssl certificates
  become: true
  copy:
    src: "{{ item }}"
    dest: "{{ docker_ecr_proxy_ssl_host_path }}/{{ item }}"
  with_items:
    - certificate.pem
    - key.pem
  when:
    - docker_ecr_proxy_ssl_enabled | bool
    - docker_ecr_proxy_ssl_copy_certs | bool

- name: Print current cache directory size information
  become: true
  command: du -hs {{ docker_ecr_proxy_cache_path  }}  # noqa 301
  changed_when: false
  check_mode: false

- name: Build proxy container
  become: true
  environment:
    DOCKER_BUILDKIT: "1"
  docker_image:
    name: "{{ docker_ecr_proxy_image }}"
    build:
      cache_from:
        - "openresty/openresty:1.15.8.3-alpine"
      path: docker
  tags:
    - build-image

- name: Remove previous proxy container
  become: true
  docker_container:
    name: docker-registry-proxy
    state: absent
  when: docker_ecr_proxy_clear_cache|bool

- name: Clear local cache
  become: true
  file:
    path: "{{ docker_ecr_proxy_cache_path }}"
    state: absent
  when: docker_ecr_proxy_clear_cache|bool

- name: Run new docker registry proxy container
  become: true
  docker_container:
    image: "{{ docker_ecr_proxy_image }}"
    name: docker-registry-proxy
    network_mode: host
    restart_policy: unless-stopped
    tmpfs:
      - "/tmp"
    env: >
      {{
        {
          "RESOLVER": docker_ecr_proxy_backend_resolver
          "PORT": "5000"
          "UPSTREAM": docker_ecr_proxy_backend_schema ~ "//" ~ docker_ecr_proxy_backend
          "CACHE_MAX_SIZE": docker_ecr_proxy_cache_limit
          "AWS_REGION": docker_ecr_proxy_aws_region
          "ENABLE_SSL": "true" if (docker_ecr_proxy_ssl_enabled | bool) else "false"
        }
        | union({
          "AWS_PROFILE": docker_ecr_proxy_aws_profile
        } if (docker_ecr_proxy_aws_profile|length) else {
          "AWS_ACCESS_KEY_ID": docker_ecr_proxy_aws_access_id
          "AWS_SECRET_ACCESS_KEY": docker_ecr_proxy_aws_secret_key
        })
        | union({
          "REGISTRY_HTTP_TLS_KEY": docker_ecr_proxy_ssl_container_path ~ "/key.pem"
          "REGISTRY_HTTP_TLS_CERTIFICATE": docker_ecr_proxy_ssl_container_path ~ "/certificate.pem"
        } if (docker_ecr_proxy_ssl_enabled | bool) else {})
      }}
    volumes: >
      {{
        [
          docker_ecr_proxy_cache_path ~ ":/cache:rw"
        ] | union([
          docker_ecr_proxy_profile_path ~ ":/root/.aws:ro"
        ] if (docker_ecr_proxy_aws_profile_path|length) else [])
        | union([
          docker_ecr_proxy_ssl_host_path ~ "/" ~ docker_ecr_proxy_ssl_host_cert_name ~ ":" ~ docker_ecr_proxy_ssl_container_path ~ "/certificate.pem:ro"
          docker_ecr_proxy_ssl_host_path ~ "/" ~ docker_ecr_proxy_ssl_host_key_name ~ ":" ~ docker_ecr_proxy_ssl_container_path ~ "/key.pem:ro"
        ] if (docker_ecr_proxy_ssl_enabled | bool) else [])
      }}
